import { useState, useEffect } from "react";
import Form from "react-bootstrap/Form";
import Head from "next/head";
import InputGroup from "react-bootstrap/InputGroup";
import Button from "react-bootstrap/Button";
import Card from "react-bootstrap/Card";
import Alert from "react-bootstrap/Alert";
import Placeholder from "react-bootstrap/Placeholder";
import img from "../../public/thirteen.svg";
import Image from "next/image";
import Router, { useRouter } from "next/router";
import styles from "../../styles/Home.module.css";

function About(props) {
  const [movie, setMovie] = useState(props.s);
  const key = "2d4765cd";
  const [data, setData] = useState([]);
  const [check, setCheck] = useState(false);
  const [erorCode, setErorCode] = useState("");
  const [erorValue, setErorValue] = useState(
    "You might be mistyped Movie name Hence Movie Not Found."
  );

  async function api() {
    loading.style.display = "flex";
    displaycard.style.display = "None";
    console.log(movie);
    Eror.style.display = "none";

    await fetch(`https://www.omdbapi.com/?apikey=${key}&s=${movie}`, {
      // mode: "no-cors",
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Credentials": true,
    })
      .then((response) => response.json())
      .then((d) => {
        // console.log(d);
        if (d["Response"] == "False") {
          Eror.style.display = "Block";
          setErorCode("Error 404! No match Found.");
          setErorValue(
            "You might be mistyped Movie name Hence Movie Not Found."
          );
          setData([]);
        } else {
          displaycard.style.display = "block";
          setCheck(true);
          setData(d["Search"]);

          // console.log(d);
        }
        loading.style.display = "None";
      });
  }

  function handleMovieChange(e) {
    setMovie(e.target.value);
  }

  function onpress() {
    if (
      typeof movie === "undefined" ||
      (typeof movie === "string" && movie.trim().length === 0)
    ) {
      setErorValue(
        "Invalid combination of letters Searched , Such as Empty characters!."
      );
      setErorCode("Error 422 ! Unsupported Entry");
      Eror.style.display = "block";
    } else {
      api();
    }
  }
  function keyPress(e) {
    if (e.keyCode === 13) {
      // console.log("value", e.target.value);
      if (
        typeof movie === "undefined" ||
        (typeof movie === "string" && movie.trim().length === 0)
      ) {
        setErorValue(
          "Invalid combination of letters Searched , Such as Empty characters!."
        );
        setErorCode("Error 422 ! Unsupported Entry");
        Eror.style.display = "block";
      } else {
        api();
      }
      e.preventDefault();
    }
  }

  useEffect(() => {
    api();
    return;
  }, []);

  return (
    <>
      <Head>
        <title>Search</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="../favicon.ico" />
      </Head>
      {/* <InputGroup className="mb-3 mx-auto" style={{ width: "80vw" }}> */}
      {/* <Form.Control
          aria-label="Recipient's username"
          aria-describedby="basic-addon2"
          placeholder="Search your Movie By Name"
          value={movie}
          onChange={handleMovieChange}
          onKeyDown={keyPress}
          className="bgBlack"
        />
        <Button
          variant="outline-secondary"
          id="button-addon2"
          onClick={onpress}
        >
          Search
        </Button> */}
      {/* </InputGroup> */}
      <Form className="d-flex">
        <Form.Control
          type="search"
          placeholder="Search"
          value={movie}
          onChange={handleMovieChange}
          onKeyDown={keyPress}
          className="me-2 bgBlack fontWhite"
          aria-label="Search"
        />
        <Button variant="outline-dark" onClick={onpress}>
          Search
        </Button>
      </Form>

      {/* Movie List  */}
      <div id="displaycard" style={{ height: "80vh", overflow: "scroll" }}>
        {check ? (
          data.slice(0, 6).map((m, i) => (
            <Card key={i} className={` ${styles.displaycard} bgBlack`}>
              <div className={styles.thirteen}>
                <Image
                  // If Image component of Nextjs is used
                  // to Understand the concept behind loader function read this Image Optimization article from next js Documentation
                  // https://nextjs.org/docs/basic-features/image-optimization
                  loader={() => {
                    return m.Poster;
                  }}
                  src={m.Poster}
                  width={120}
                  height={400}
                  className={styles.image}
                  alt={m.Title}
                />
              </div>

              <Card.Body>
                <Card.Title className={styles.title}>{m.Title}</Card.Title>
                <Card.Text className={styles.type}>{m.Type}</Card.Text>
                <Card.Text>{m.Year}</Card.Text>
                <Button variant="primary" onClick={() => Router.push(m.imdbID)}>
                  Details
                </Button>
              </Card.Body>
            </Card>
          ))
        ) : (
          <div>no</div>
        )}
      </div>

      {/* loading Skeleton */}
      <Card
        style={{
          width: "60vw",
          margin: "Auto",
          display: "flex",
          flexDirection: "row",
        }}
        className="bgBlack"
        id="loading"
      >
        <Image
          src={img}
          alt=".."
          style={{
            margin: "Auto",
            height: "80px",
            width: "auto",
            padding: "1rem",
          }}
        />
        <Card.Body>
          <Placeholder as={Card.Title} animation="glow">
            <Placeholder xs={6} />
          </Placeholder>
          <Placeholder as={Card.Text} animation="glow">
            <Placeholder xs={11} />
            <Placeholder xs={8} />
          </Placeholder>
          <Placeholder.Button variant="primary" xs={2} />
        </Card.Body>
      </Card>

      {/* Error box */}
      <Alert
        id="Eror"
        variant="danger"
        onClose={() => (Eror.style.display = "none")}
        dismissible
        style={{
          width: "75vw",
          margin: "auto",
          backgroundColor: "#a9414b",
          display: "none",
        }}
        className="thirteen"
      >
        <Alert.Heading>{erorCode}</Alert.Heading>
        <p>{erorValue}</p>
      </Alert>
    </>
  );
}

export async function getServerSideProps(context) {
  var s = context.query.s;
  console.log(context);
  if (typeof s === "undefined") {
    s = "Bollywood";
  }
  return {
    props: { s }, // will be passed to the page component as props
  };
}
export default About;
